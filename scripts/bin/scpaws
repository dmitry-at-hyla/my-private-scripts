#!/bin/bash

#
# Using:
#
# scpaws [env] [program] <source> <destination>
#
# env or program could be in any order
# source is a last but one parameter
# destination is a last parameter
# default env is dev
# default program is hyla
#
# where source and destination are in form of [server:][number:][path]
# default server is commonservices, default number is 1.
# So following values are accepted:
#
# * ./file.txt (local file)
# * :/tmp/file.txt (remote file on commonservices-1)
# * ::/tmp/file.txt (remote file on commonservices-1)
# * :2:/tmp/file.txt (remote file on commonservices-2)
# * batch:/tmp/file.txt (remote file on batch-1)
# * batch::/tmp/file.txt (remote file on batch-1)
# * batch:2:/tmp/file.txt (remote file on batch-2)
#
# Examples:
#
# scpaws qa file.txt batch:/tmp
# scpaws batch:/app/service/logs/output.log .
#

set -e

REMOTE_USER=dantonyuk

ENV=dev
PROGRAM=hyla
SERVER_NO=1
SRC_FILE=
DST_FILE=

get_resource() {
    BASTION="$1"
    RESOURCE="$2"

    IFS=':' read -r -a SPLITTED <<< "${RESOURCE}"
    case ${#SPLITTED[@]} in
        1)
            echo "${RESOURCE}"
            ;;
        2)
            SERVER=$(get_server_name "${SPLITTED[0]}")
            NUMBER=1
            FILE=${SPLITTED[1]}
            SERVER_IP=$(get_server_ip ${BASTION} ${SERVER} ${NUMBER})
            echo ${REMOTE_USER}@${SERVER_IP}:${FILE}
            ;;
        3)
            SERVER=$(get_server_name "${SPLITTED[0]}")
            NUMBER=${SPLITTED[1]:-1}
            FILE=${SPLITTED[2]}
            SERVER_IP=$(get_server_ip ${BASTION} ${SERVER} ${NUMBER})
            echo ${REMOTE_USER}@${SERVER_IP}:${FILE}
            ;;
        *)
            echo "Invalid file: ${RESOURCE}. File pattern is [server:][number:][path]" >&2
            exit 1
    esac
}

get_server_ip() {
    BASTION=$1
    SERVER=$2
    NUMBER=$3

    echo $(ssh -q -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -t ${BASTION} \
        /usr/bin/aws ec2 describe-instances --filters "Name=tag:Name,Values=${SERVER}" --region us-east-1 \
        | jq -r '.Reservations[0].Instances['$((${NUMBER} - 1))'].NetworkInterfaces[0].PrivateIpAddresses[0].PrivateIpAddress')
}

get_server_name() {
    APP=$1
    case ${APP} in
    cs|commonservices|common-services|'')
        SERVER=${ENV}-appserver-${PROGRAM}-cs
        ;;
    ce)
        SERVER=${ENV}-appserver-${PROGRAM}-ce
        ;;
    cew)
        SERVER=${ENV}-appserver-${PROGRAM}-cew
        ;;
    csweb|cs-web|web|commonservicesweb|common-services-web|commonservices-web)
        SERVER=${ENV}-webserver-${PROGRAM}-cs
        ;;
    ceweb|ce-web)
        SERVER=${ENV}-webserver-${PROGRAM}-ce
        ;;
    cewweb|cew-web)
        SERVER=${ENV}-webserver-${PROGRAM}-cew
        ;;
    batch|batch-server|batchserver)
        SERVER=${ENV}-batchserver-${PROGRAM}
        ;;
    qd|quartzdesk|batch-console|batchconsole)
        SERVER=${ENV}-batch-console
        ;;
    sc|springcloud|spring-cloud|cloud)
        SERVER=${ENV}-springcloud-server
        ;;
    rmq|rabbitmq)
        SERVER=${ENV}-rmq
        ;;
    sonar|sonarqube)
        SERVER=${ENV}-${PROGRAM}-sonar
        ;;
    mock|wiremock|wire-mock|mockserver|mock-server)
        SERVER=${ENV}-wire-mock
        ;;
    *)
        echo "Unknown server: ${SERVER}"
        exit 3
        ;;
    esac

    # Special cases region

    if [[ "${PROGRAM}" == "old-google" ]]
    then
        case ${APP} in
        ce)
            SERVER=gce-appserver
            ;;
        cew)
            SERVER=gcew-appserver
            ;;
        ceweb|ce-web)
            SERVER=gce-webserver
            ;;
        cewweb|cew-web)
            SERVER=gcew-webserver
            ;;
        batch|batch-server|batchserver)
            SERVER=batch-server
            ;;
        esac
    fi

    # End of special cases region

    echo ${SERVER}
}

for (( i=$#; i>0; i-- ))
do
    ARG="${!i}"
    if [[ "${DST_RESOURCE}" == "" ]]
    then
        DST_RESOURCE="${ARG}"
    elif [[ "${SRC_RESOURCE}" == "" ]]
    then
        SRC_RESOURCE="${ARG}"
    else
        case ${ARG} in
            dev|qa|uat|prod|tst|stg)
                ENV="${ARG}"
                ;;
            *)
                PROGRAM="${ARG}"
        esac
    fi
done

BASTION=$(bastions ${PROGRAM} ${ENV})
SRC_FILE=$(get_resource ${BASTION} ${SRC_RESOURCE})
DST_FILE=$(get_resource ${BASTION} ${DST_RESOURCE})

echo scp -o 'ProxyCommand ssh '${BASTION}' -W %h:%p' "${SRC_FILE}" "${DST_FILE}" >&2
scp -o 'ProxyCommand ssh '${BASTION}' -W %h:%p' "${SRC_FILE}" "${DST_FILE}"
